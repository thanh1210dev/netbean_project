/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import config.XLogin;
import entity.HinhThucThanhToan;
import entity.HoaDon;
import entity.HoaDonChiTiet;
import entity.PhieuGiamGia;
import java.awt.Frame;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import pro1041.Dashboard;
import reponsitory.BanHangRepository;
import response.HoaDonCT_Response;
import response.HoaDon_Response;
import response.SanPhamChiTietResponse;

/**
 *
 * @author Asus
 */
public class JpanelBanHang extends javax.swing.JPanel {

    private final BanHangRepository banHangRepository = new BanHangRepository();
    private Double priceAffterR = 0d;

    /**
     * Creates new form JpanelBanHang
     */
    public JpanelBanHang() {
        initComponents();
        tblInvoiceDetail.setRowHeight(25);
        tblInvoicePending.setRowHeight(25);
        tblProductDetail.setRowHeight(25);

        loadDataTableSP(banHangRepository.getAllProductDetail());
        loadDataTableInvoicePending(banHangRepository.getAllInvoicePending());
        loadComboboxFormOfPayment();
        loadComboboxVoucher();

        tuDongTinhTienKhachDua();
    }

    public static void main(String[] args) {
        JFrame jFrame = new JFrame("View Ban Hang");
        JpanelBanHang jbh = new JpanelBanHang();
        jFrame.add(jbh);
        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jFrame.pack();
        jFrame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        JMenuItemUpdateQuantity = new javax.swing.JMenuItem();
        jMenuItemDeleteProduct = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        lblMaHD4 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        lblTienThuaThieu4 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        cboHinhThucThanhToan = new javax.swing.JComboBox<>();
        lblTongTien4 = new javax.swing.JLabel();
        lblPayment = new javax.swing.JLabel();
        btnThanhToan = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel11 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        btnThemNhanhKhachHang = new javax.swing.JButton();
        lblBaoLoiKH = new javax.swing.JLabel();
        txtTenKH = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        cboVoucher = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        lblPriceAfterReduction = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        lblTienThua = new javax.swing.JLabel();
        txtTienKhachDua = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        lblTienThuaThieu = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoicePending = new javax.swing.JTable();
        btnTaoHoaDon = new javax.swing.JButton();
        btnHuyHoaDon = new javax.swing.JButton();
        btnScanQR = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblInvoiceDetail = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        txtTim = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProductDetail = new javax.swing.JTable();
        spinValueMin = new javax.swing.JSpinner();
        spinValueMax = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnLamMoi = new javax.swing.JButton();

        JMenuItemUpdateQuantity.setText("Sửa số lượng");
        JMenuItemUpdateQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemUpdateQuantityActionPerformed(evt);
            }
        });
        jPopupMenu1.add(JMenuItemUpdateQuantity);

        jMenuItemDeleteProduct.setText("Xóa sản phẩm");
        jMenuItemDeleteProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemDeleteProductMouseClicked(evt);
            }
        });
        jMenuItemDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteProductActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemDeleteProduct);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Thanh Toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel10.setMaximumSize(new java.awt.Dimension(357, 638));
        jPanel10.setPreferredSize(new java.awt.Dimension(683, 689));

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel28.setText("Mã hóa đơn:");

        lblMaHD4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblMaHD4.setText("Hóa đơn");

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel29.setText("Tổng tiền:");

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel30.setText("Phải thanh toán:");

        lblTienThuaThieu4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel32.setText("Hình thức thanh toán:");

        lblTongTien4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTongTien4.setText("VND");

        lblPayment.setBackground(new java.awt.Color(0, 204, 0));
        lblPayment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPayment.setText("VND");

        btnThanhToan.setBackground(new java.awt.Color(0, 204, 51));
        btnThanhToan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnThanhToan.setForeground(new java.awt.Color(255, 255, 255));
        btnThanhToan.setText("Thanh toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(102, 204, 255));

        jSeparator2.setBackground(new java.awt.Color(102, 204, 255));

        jSeparator3.setBackground(new java.awt.Color(102, 204, 255));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Tên khách hàng:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("SĐT");

        txtSDT.setEditable(false);
        txtSDT.setText("0000000000");
        txtSDT.setAutoscrolls(false);

        btnThemNhanhKhachHang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pro1041/icon/Create.png"))); // NOI18N
        btnThemNhanhKhachHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemNhanhKhachHangActionPerformed(evt);
            }
        });

        lblBaoLoiKH.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblBaoLoiKH.setForeground(new java.awt.Color(255, 51, 51));

        txtTenKH.setEditable(false);
        txtTenKH.setText("Khách bán lẻ");
        txtTenKH.setAutoscrolls(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTenKH)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnThemNhanhKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBaoLoiKH, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 7, Short.MAX_VALUE))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnThemNhanhKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBaoLoiKH, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel36.setText("Phiếu giảm giá:");

        cboVoucher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cboVoucher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboVoucherItemStateChanged(evt);
            }
        });
        cboVoucher.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboVoucherMouseClicked(evt);
            }
        });
        cboVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboVoucherActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel35.setText("Tiền sau giảm:");

        lblPriceAfterReduction.setBackground(new java.awt.Color(0, 204, 0));
        lblPriceAfterReduction.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPriceAfterReduction.setText("VND");

        jSeparator5.setBackground(new java.awt.Color(102, 204, 255));

        lblTienThua.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTienThua.setText("VND");

        txtTienKhachDua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTienKhachDuaActionPerformed(evt);
            }
        });

        jSeparator4.setBackground(new java.awt.Color(102, 204, 255));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Tiền khách đưa:");

        lblTienThuaThieu.setText("Khách thiếu:");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel30))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblTongTien4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblMaHD4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 19, Short.MAX_VALUE))))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(lblTienThuaThieu4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cboHinhThucThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel8)
                                                .addComponent(lblTienThuaThieu))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblTienThua)
                                                .addComponent(txtTienKhachDua, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addGap(126, 126, 126)
                                            .addComponent(cboVoucher, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel36)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addGap(44, 44, 44)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPriceAfterReduction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel29)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(lblMaHD4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(lblTongTien4)
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(lblPriceAfterReduction))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(lblPayment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblTienThuaThieu4))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(cboHinhThucThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(cboVoucher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTienKhachDua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTienThua)
                    .addComponent(lblTienThuaThieu))
                .addGap(5, 5, 5)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hóa đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tblInvoicePending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID hóa đơn", "Mã hóa đơn", "Ngày tạo", "Nhân viên", "Khách hàng", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoicePending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInvoicePendingMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInvoicePending);

        btnTaoHoaDon.setBackground(new java.awt.Color(0, 204, 0));
        btnTaoHoaDon.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnTaoHoaDon.setText("Tạo hoá đơn");
        btnTaoHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHoaDonActionPerformed(evt);
            }
        });

        btnHuyHoaDon.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnHuyHoaDon.setText("Hủy hóa đơn");
        btnHuyHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyHoaDonActionPerformed(evt);
            }
        });

        btnScanQR.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnScanQR.setText("Quét QR");
        btnScanQR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanQRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(btnHuyHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnScanQR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnHuyHoaDon, btnTaoHoaDon});

        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(btnTaoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHuyHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnScanQR, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Giỏ hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tblInvoiceDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "IDSPCT", "Mã SP", "Tên SP", "Màu sắc", "Độ căng", "Chiều dài vợt", "Số lượng", "Đơn giá", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoiceDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInvoiceDetailMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tblInvoiceDetail);
        if (tblInvoiceDetail.getColumnModel().getColumnCount() > 0) {
            tblInvoiceDetail.getColumnModel().getColumn(1).setHeaderValue("IDSPCT");
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sản Phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        txtTim.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimFocusLost(evt);
            }
        });

        btnTimKiem.setBackground(new java.awt.Color(204, 255, 255));
        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_icon.png"))); // NOI18N
        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        tblProductDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã Sản Phẩm", "IDSPCT", "Tên Sản Phẩm", "Màu Sắc", "Độ Cứng", "Độ Bay", "Điểm Cân Bằng", "Trọng Lượng", "Độ Căng", "Số lượng", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProductDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblProductDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductDetailMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblProductDetail);

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Lọc");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Min");

        jLabel5.setText("Max");

        btnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pro1041/icon/refresh (1).png"))); // NOI18N
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnTimKiem)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinValueMin, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinValueMax, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTimKiem)
                        .addComponent(spinValueMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinValueMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(933, 933, 933)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        try {
            if (tblInvoicePending.getSelectedRow() >= 0) {
                if (tblInvoiceDetail.getRowCount() > 0) {
                    try {
                        Double tienkhachdua = Double.valueOf(txtTienKhachDua.getText());
                        
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Tiền khách đưa không hợp lệ");
                        return;
                    }
                    if (!lblTienThuaThieu.getText().equalsIgnoreCase("Khách thiếu:")) {
                        int choice = JOptionPane.showConfirmDialog(this, "Bạn có muốn thanh toán hoá đơn này?", "THANH TOÁN", JOptionPane.YES_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {

                            HinhThucThanhToan httt = (HinhThucThanhToan) cboHinhThucThanhToan.getSelectedItem();
                            PhieuGiamGia pgg = new PhieuGiamGia();
                            Integer idHD = this.getIDHD();
                            String tenKh = "Khách Hàng Lẻ";
                            String sdt = "0000000000";
                            String diachi = "";
                            Integer idKH = 1;
                            if (KhachHangJDialog.tenkh != null || KhachHangJDialog.sdt != null || KhachHangJDialog.idkh != null || KhachHangJDialog.diachi != null) {
                                tenKh = KhachHangJDialog.tenkh;
                                sdt = KhachHangJDialog.sdt;
                                idKH = KhachHangJDialog.idkh;
                                diachi = KhachHangJDialog.diachi;
                            }

                            if (cboVoucher.getSelectedIndex() != 0) {
                                pgg = (PhieuGiamGia) cboVoucher.getSelectedItem();
                            } else {
                                this.priceAffterR = banHangRepository.getTotalpriceInvoice(idHD);
                            }

                            if (banHangRepository.payment(
                                    idHD,
                                    httt.getId(),
                                    tenKh,
                                    sdt,
                                    this.priceAffterR,
                                    pgg.getId(),
                                    idKH) != 0) {
                                JOptionPane.showMessageDialog(this, "Thanh toán thành công!!");
                                this.loadDataTableInvoicePending(banHangRepository.getAllInvoicePending());
                                this.loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(0));
                                clearElementPayment();
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Tiền khách đưa thiếu");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Hoá đơn chưa có sản phẩm");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Chọn hoá đơn trước khi thanh toán");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tiền khách đưa không hợp lệ!!");
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void btnThemNhanhKhachHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemNhanhKhachHangActionPerformed
//        int choice = JOptionPane.showConfirmDialog(this, "Bạn có muốn chọn khách hàng?", "Chọn khách hàng", JOptionPane.YES_OPTION);
//        if (choice == JOptionPane.YES_OPTION) {
            KhachHangJDialog dialog = new KhachHangJDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
            dialog.setVisible(true);
            setKhachHang();
//        }

    }//GEN-LAST:event_btnThemNhanhKhachHangActionPerformed

    private void setKhachHang() {
        txtSDT.setText(KhachHangJDialog.sdt);
        txtTenKH.setText(KhachHangJDialog.tenkh);
    }
    private void tblInvoicePendingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoicePendingMouseClicked
//        // TODO add your handling code here:

        Integer idHD = getIDHD();
        HoaDon_Response hdr = banHangRepository.getInvoiceById(idHD);
        loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
        lblTongTien4.setText(formatCash(banHangRepository.getTotalpriceInvoice(idHD)));
        lblMaHD4.setText(hdr.getMa());
        lblPayment.setText(formatCash(hdr.getTongTien()));
        this.updateElementPayment(idHD);

        txtTienKhachDua.setText("");
        lblTienThua.setText("VND");
        lblTienThuaThieu.setText("Khách thiếu:");
    }//GEN-LAST:event_tblInvoicePendingMouseClicked

    private void btnTaoHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHoaDonActionPerformed
        // TODO add your handling code here:
        //Tạo 1 hóa đơn chờ mới
        //Biến sử dụng để check xem người dùng có muốn tạo 1 hóa đơn chờ hay không
        int choice = JOptionPane.showConfirmDialog(this, "Bạn muốn tạo hoá đơn mới?", "TẠO HOÁ ĐƠN MỚI", JOptionPane.YES_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            //Check chỉ được tạo tối đa 5 hóa đơn chờ
            if (banHangRepository.getAllInvoicePending().size() >= 5) {
                JOptionPane.showMessageDialog(this, "Chỉ được tạo tối đa 5 hóa đơn chờ");
            } else {
                //Nếu người dùng đồng ý tạo và số hóa đơn chờ chưa vượt quá 5 thì thực hiện tạo hóa đơn chờ
                createInvoicePending();
                lblMaHD4.setText("");

            }
        }
    }//GEN-LAST:event_btnTaoHoaDonActionPerformed

    private void btnHuyHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyHoaDonActionPerformed
        // TODO add your handling code here:

        //Sự kiện click hủy hóa đơn
        //Nếu hóa đơn cần hủy trên bản chưa được chọn thì thông báo cần chọn hóa đơn để hủy
        int index = tblInvoicePending.getSelectedRow();
        if (index >= 0) {
            //Lấy giá trị id hóa đơn;
            Integer idHD = getIDHD();
            //Check xem người dùng có muốn hủy hóa đơn hay không
            int choice = JOptionPane.showConfirmDialog(this, "Bạn muốn huỷ hoá đơn: " + idHD + "?", "HUỶ HOÁ ĐƠN", JOptionPane.YES_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                //Kiểm tra xem nếu hóa đơn cần hủy nếu không có sản phẩm nào thì hủy theo cách 1
                List<HoaDonCT_Response> list = banHangRepository.getInvoiceDetailByCodeInvoice(idHD);
                if (list.isEmpty()) {
                    this.cancelInvoiceUngenratedInvoiceDetail(idHD);
                } else {
                    //Hủy hóa đơn đã có sản phẩm
                    //Lấy ra danh sách hóa đơn chi tiết theo id hóa đơn; 
                    List<HoaDonCT_Response> listInvoiceDetail = banHangRepository.getInvoiceDetailByCodeInvoice(idHD);
                    //Các biến mảng số nguyên sử dụng để add id SPCT và số lượng của spct trong hóa đơn chi tiết;
                    Integer[] arrIDSPCT = new Integer[listInvoiceDetail.size()];
                    Integer[] arrQuantity = new Integer[listInvoiceDetail.size()];

                    //Vòng lặp map các giá trị vào biến hứng bao gồm idspct và số lượng trong hdct
                    int indexa = 0;
                    for (HoaDonCT_Response hr : listInvoiceDetail) {
                        arrIDSPCT[indexa] = hr.getCtspID();
                        arrQuantity[indexa] = hr.getSoLuong();
                        indexa++;
                    }

                    //Vòng lặp thực hiện hủy hóa đơn và x
                    for (int i = 0; i < listInvoiceDetail.size(); i++) {
                        //Biến lấy ra số lượng spct hiện tại trong kho theo id spct;
                        Integer quantityCurrent = banHangRepository.getQuantityProductDetail(arrIDSPCT[i]);
                        //Biến thực hiện cộng số lượng spct trong kho với số lượng spct trong hdct
                        Integer quantityNew = quantityCurrent + arrQuantity[i];
                        //Hàm update số lượng sản phẩmc chi tiết theo id spct
                        banHangRepository.updateQuantityProductDetailInStock(quantityNew, arrIDSPCT[i]);
                        //Thực hiện hủy hóa đơn theo id hd 
                        this.cancelInvoiceGenratedInvoiceDetail(idHD, arrIDSPCT[i]);
                    }

                    //Load lại dữ liệu mới lên 3 bảng;
                    loadDataTableInvoicePending(banHangRepository.getAllInvoicePending());
                    loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(0));
                    loadDataTableSP(banHangRepository.getAllProductDetail());
                    updateElementPayment(0);
                    lblMaHD4.setText("");

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hoá đơn cần huỷ!!");
        }
    }//GEN-LAST:event_btnHuyHoaDonActionPerformed

    private void txtTimFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimFocusGained
        //        // TODO add your handling code here:
        //         if (txtTim.getText().equals("Tìm theo mã, tên")) {
        //            txtTim.setText(null);
        //            txtTim.requestFocus();
        //            RemovePleacehoderStyle(txtTim);
        //        }
    }//GEN-LAST:event_txtTimFocusGained

    private void txtTimFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimFocusLost
        //        // TODO add your handling code here:
        //         if (txtTim.getText().length() == 0) {
        //            AddPleacehoderStyle(txtTim);
        //            txtTim.setText("Tìm theo mã, tên");
        //
        //        }
    }//GEN-LAST:event_txtTimFocusLost

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        spinValueMin.setValue(0);
        spinValueMax.setValue(0);
        loadDataTableSP(banHangRepository.getAllProductDetailByKeyword(txtTim.getText()));
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void tblProductDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductDetailMouseClicked
        // TODO add your handling code here:

        //Kiểm tra xem đã chọn hóa đơn trên bảng hay chưa;
        if (tblInvoicePending.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Chọn hóa đơn cần thêm sản phầm!");
        } else {
            //Nếu đã chọn hóa đơn thì thực hiện thêm sản phẩm vào giỏ hàng
            this.addProductDetailIntoCart();
        }

    }//GEN-LAST:event_tblProductDetailMouseClicked

    private void tblInvoiceDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoiceDetailMouseClicked
        // TODO add your handling code here:
        jPopupMenu1.show(tblInvoiceDetail, evt.getX(), evt.getY());
    }//GEN-LAST:event_tblInvoiceDetailMouseClicked

    private void jMenuItemDeleteProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemDeleteProductMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jMenuItemDeleteProductMouseClicked

    private void jMenuItemDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteProductActionPerformed
        // TODO add your handling code here:
        try {

            if (tblInvoicePending.getSelectedRow() >= 0) {
                Integer idSPCT = Integer.valueOf(tblInvoiceDetail.getValueAt(tblInvoiceDetail.getSelectedRow(), 1).toString());
                Integer idHD = getIDHD();
                int choice = JOptionPane.showConfirmDialog(this, "Bạn muốn xóa sản phẩm ra khỏi giỏ hàng?", "HUỶ HOÁ ĐƠN", JOptionPane.YES_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    Integer quantityInInvoiceDetail = this.getQuantityInvoiceDetail(idHD, idSPCT);
                    Integer quantityIProductDetailnStock = this.getQuantityProducteDetailInStock(idSPCT);
                    Integer quantityUpdate = quantityInInvoiceDetail + quantityIProductDetailnStock;
                    this.deleteInvoiceDetail(idHD, idSPCT);
                    this.updateQuantityProductDetailInStock(quantityUpdate, idSPCT);
                    banHangRepository.updateToTalPriceInvoice(banHangRepository.getTotalpriceInvoice(idHD), idHD);
                    loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
                    loadDataTableSP(banHangRepository.getAllProductDetail());
                    //Load lại các thành phần thanh toán
                    this.updateElementPayment(idHD);
                    lblTienThuaThieu.setText("Khách thiếu:");
                    txtTienKhachDua.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Mời chọn lại hóa đơn!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi trong quá trình xóa sản phẩm khỏi giỏ hàng");
        }
    }//GEN-LAST:event_jMenuItemDeleteProductActionPerformed

    private void btnScanQRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanQRActionPerformed
        // TODO add your handling code here:
        int index = tblInvoicePending.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hoá đơn trước khi quét qr!!");
        } else {
            openQR();
            if (ReadQRCodeBH.sPCT_id != null) {
                this.addProductDetailIntoCartQR();
                updateElementPayment(getIDHD());
                lblTienThuaThieu.setText("Khách thiếu:");
                txtTienKhachDua.setText("");
            }
        }

    }//GEN-LAST:event_btnScanQRActionPerformed
    int soLuongSanPhamThayDoi = 0;
    private void JMenuItemUpdateQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuItemUpdateQuantityActionPerformed
        // TODO add your handling code here:
        if (checkSoLuongThayDoi()) {
            Integer idSPCT = Integer.valueOf(tblInvoiceDetail.getValueAt(tblInvoiceDetail.getSelectedRow(), 1).toString());
            Integer idHD = getIDHD();

            Integer quantityProductDetailCurrentInStock = banHangRepository.getQuantityProductDetail(idSPCT);
            Integer quantityProductDetailCurrentInInvoiceDetail = banHangRepository.getQuantityInvoiceDetailByIdHDAndIdSPCT(idHD, idSPCT);
            Integer quantityNew = (quantityProductDetailCurrentInInvoiceDetail + quantityProductDetailCurrentInStock) - this.soLuongSanPhamThayDoi;
            //Update số lượng sản phẩm trong kho
            banHangRepository.updateQuantityProductDetailInStock(quantityNew, idSPCT);
            //Update lại số lượng và đơn giá của hdct
            banHangRepository.updateQuantityAndTotalPriceInvoiceDetail(idSPCT, idHD, this.soLuongSanPhamThayDoi, this.totalPrice(this.soLuongSanPhamThayDoi, banHangRepository.getPriceProductDetail(idSPCT)));
            //Update lại tổng tiền của hóa đơn
            Double totalPrice = banHangRepository.getTotalpriceInvoice(idHD);
            banHangRepository.updateToTalPriceInvoice(totalPrice, idHD);
            loadDataTableSP(banHangRepository.getAllProductDetail());
            loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));

            //Update lại các thành phần thông tin thanh toán
            this.updateElementPayment(idHD);
            lblTienThuaThieu.setText("Khách thiếu:");
            txtTienKhachDua.setText("");
            clearElementPayment();
        }
    }//GEN-LAST:event_JMenuItemUpdateQuantityActionPerformed

    private void cboVoucherMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboVoucherMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_cboVoucherMouseClicked

    //Biến chứa vị trí cbbVoucher đang được chọn;
    private int cbbVoucherCurrentIndex = 0;

    private void cboVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboVoucherActionPerformed
        // TODO add your handling code here:
        try {
            //Kiểm tra xem cboVoucher đã có dữ liệu chưa
            if (cboVoucher.getItemCount() > 0) {
                //Kiểm tra Hóa đơn đã được chọn hay chưa 
                if (tblInvoicePending.getSelectedRow() >= 0) {
                    //Kiểm tra xem nếu cbo đang chọn khác với Đối tượng --Phiếu giảm giá-- thì thực thi logic
                    if (!cboVoucher.getSelectedItem().equals("--Phiếu giảm giá--")) {
                        //Đối tượng phiếu giảm giá theo cboVoucher đang được chọn;
                        PhieuGiamGia pgg = (PhieuGiamGia) cboVoucher.getSelectedItem();
                        //Biến chứa id hóa đơn
                        Integer idHD = getIDHD();
                        //Biến chứa tổng tiền được lấy ra theo id hóa đơn
                        Double totalPrice = banHangRepository.getTotalpriceInvoice(idHD);
                        //Biến chứa chuỗi loại giảm
                        String loaiGiam = pgg.getLoaiGiam() == true ? "Tiền mặt" : "Phần trăm %";
                        //Kiểm tra xem phiếu giảm giá có đang hoạt động hay không;
                        if (pgg.getTrangThai() == 2) {
                            //Kiêm tra xem loại giảm là Tiền mặt hay phần trăm
                            if (pgg.getLoaiGiam()) {
                                //Đây là logic giảm giá theo tiền mặt
                                //Biến hỏi người dùng có muốn chọ phiếu giảm giá và hiển thị thông tin phiếu giảm giá 
                                int choice = JOptionPane.showConfirmDialog(this,
                                        "Tên: " + pgg.getTen()
                                        + "\n" + "Loại giảm: " + loaiGiam
                                        + "\n" + "Hóa đơn tối thiểu: " + formatCash(pgg.getHoaDonToiThieu())
                                        + "\n" + "Giá trị giảm: " + formatCash(pgg.getGiaTriGiamMax()),
                                        "Phiếu giảm giá: " + pgg.getMa(), JOptionPane.YES_NO_OPTION
                                );
                                //Nếu người dùng chọn có thì thực hiện logic 
                                if (choice == JOptionPane.YES_OPTION) {
                                    //Kiểm tra tổng tiền của hóa đơn đã đủ điều kiện sử dụng hay chưa
                                    if (pgg.getHoaDonToiThieu() > totalPrice) {
                                        //Trường hợp hóa đơn chưa đủ điều kiện dùng;
                                        //Kiểm tra xem có đang chọn phiếu giảm giá khác trước đó hay không
                                        //Nếu đã có phiếu giảm giá được chọn trước đó thì thực hiện trả lại cbo đang chọn về vị trí phiếu đã chọn
                                        if (cboVoucher.getSelectedIndex() != 0) {
                                            cboVoucher.setSelectedIndex(this.cbbVoucherCurrentIndex);
                                        } else {
                                            this.cbbVoucherCurrentIndex = 0;
                                            //Trường hợp chưa chọn phiếu giảm giá trước đó
                                            //Set cbbVoucher về thành chưa chọ mã
                                            cboVoucher.setSelectedIndex(0);
                                            //Update lại các thành phần thanh toán
                                            updateElementPayment(idHD);
                                        }
                                        //Thông báo hóa đơn chưa đủ điều kiện dùng
                                        JOptionPane.showMessageDialog(this, "Hóa đơn chưa đủ giá tiền tối thiểu để dùng mã!");
                                    } else {

                                        //Trường hợp hóa đơn đủ điểu kiện sử dụng voucher;
                                        if (pgg.getLoaiGiam()) {
                                            //Trường hợp dùng phiếu giảm theo tiền mặt
                                            System.out.println("[CHỌN PHIẾU GIẢM GIÁ THEO LOẠI TIỀN MẶT]");
                                            //Set vị trí phiếu giảm giá đang chọn cho biến chứa;
                                            this.cbbVoucherCurrentIndex = cboVoucher.getSelectedIndex();
                                            //Biến chứa giá tiền sau khi giảm thực hiện chọn phiếu giảm giá theo tiền mặt
                                            Double priceAfterVoucherCash = this.getPriceAfterVoucherCash(pgg.getGiaTriGiamMax(), totalPrice);
                                            this.priceAffterR = priceAfterVoucherCash;
                                            lblPriceAfterReduction.setText(formatCash(priceAfterVoucherCash));
                                            lblPayment.setText(formatCash(priceAfterVoucherCash));
                                            lblTienThuaThieu.setText("Khách thiếu:");
                                            txtTienKhachDua.setText("");
                                        }
                                    }
                                    //Trường hợp người dùng chỉ chọn vào voucher mà không dùng
                                } else {
                                    //Kiểm tra xem đã chọn voucher nào trước đó chưa nếu chưa thì
                                    if (cboVoucher.getSelectedIndex() != 0) {
                                        cboVoucher.setSelectedIndex(this.cbbVoucherCurrentIndex);
                                    } else {
                                        this.cbbVoucherCurrentIndex = 0;
                                        cboVoucher.setSelectedIndex(0);
                                        updateElementPayment(idHD);
                                    }
                                }
                            } else {

                                int choice = JOptionPane.showConfirmDialog(this,
                                        "Tên: " + pgg.getTen()
                                        + "\n" + "Loại giảm: " + loaiGiam
                                        + "\n" + "Phần trăm giảm: " + pgg.getGiaTriGiamMax() + "%"
                                        + "\n" + "Giá trị giảm tối đa: " + formatCash(pgg.getHoaDonToiThieu()),
                                        "Phiếu giảm giá: " + pgg.getMa(), JOptionPane.YES_NO_OPTION
                                );
                                if (choice == JOptionPane.YES_OPTION) {
                                    System.out.println("[CHỌN PHIẾU GIẢM GIÁ THEO LOẠI %]");
                                    this.cbbVoucherCurrentIndex = cboVoucher.getSelectedIndex();
                                    if (pgg.getGiaTriGiamMax() > 100 || pgg.getGiaTriGiamMax() <= 0) {
                                        JOptionPane.showMessageDialog(this, "Phiếu giảm giá này không hợp lệ cần xem lại!");
                                        cboVoucher.setSelectedIndex(0);
                                        lblTienThuaThieu.setText("Khách thiếu:");
                                        txtTienKhachDua.setText("");
                                        updateElementPayment(getIDHD());
                                        if (cboVoucher.getSelectedIndex() != 0) {
                                            cboVoucher.setSelectedIndex(this.cbbVoucherCurrentIndex);
                                        } else {
                                            cboVoucher.setSelectedIndex(0);
                                            updateElementPayment(idHD);
                                        }
                                    } else {
                                        //Trường hợp dùng phiếu giảm phầm trăm
                                        int value = (int) pgg.getGiaTriGiamMax();
                                        Double priceAfterVoucherPercent = this.getPriceAfterVoucherPercent(pgg.getHoaDonToiThieu(), totalPrice, value);
                                        this.priceAffterR = priceAfterVoucherPercent;
                                        lblPriceAfterReduction.setText(formatCash(priceAfterVoucherPercent));
                                        lblPayment.setText(formatCash(priceAfterVoucherPercent));
                                        lblTienThuaThieu.setText("Khách thiếu:");
                                        txtTienKhachDua.setText("");
                                    }

                                } else {
                                    if (cboVoucher.getSelectedIndex() != 0) {
                                        cboVoucher.setSelectedIndex(this.cbbVoucherCurrentIndex);
                                    } else {
                                        this.cbbVoucherCurrentIndex = 0;
                                        cboVoucher.setSelectedIndex(0);
                                        updateElementPayment(idHD);
                                    }

                                }
                            }
                        } else {
                            if (cboVoucher.getSelectedIndex() != 0) {
                                cboVoucher.setSelectedIndex(this.cbbVoucherCurrentIndex);
                            } else {
                                this.cbbVoucherCurrentIndex = 0;
                                cboVoucher.setSelectedIndex(0);
                                updateElementPayment(idHD);
                            }
                            JOptionPane.showMessageDialog(this, "Phiếu giảm giá hết hiệu lực!");
                        }
                    } else {
                        this.cbbVoucherCurrentIndex = 0;
                        updateElementPayment(getIDHD());
                        txtTienKhachDua.setText("");
                        lblTienThuaThieu.setText("Khách thiếu:");
                        txtTienKhachDua.setText("");
                    }
                }
            }
        } catch (Exception e) {
            this.cbbVoucherCurrentIndex = 0;
            cboVoucher.setSelectedIndex(0);
            JOptionPane.showMessageDialog(this, "Phiếu giảm giá không hợp lệ!");
        }

    }//GEN-LAST:event_cboVoucherActionPerformed


    private void cboVoucherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboVoucherItemStateChanged
        // TODO add your handling code here:


    }//GEN-LAST:event_cboVoucherItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Min: " + spinValueMin.getValue());
        System.out.println("Max: " + spinValueMax.getValue());
        Double priceMin = Double.valueOf(spinValueMin.getValue() + "");
        Double priceMax = Double.valueOf(spinValueMax.getValue() + "");
        if (priceMin > priceMax) {
            JOptionPane.showMessageDialog(this, "Giá trị min không được lớn hơn max!");
            return;
        }

        txtTim.setText("");
        loadDataTableSP(banHangRepository.getAllProductDetailByPriceMinMax(priceMin, priceMax));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        spinValueMin.setValue(0);
        spinValueMax.setValue(0);
        txtTim.setText("");
        loadDataTableSP(banHangRepository.getAllProductDetail());

    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void txtTienKhachDuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTienKhachDuaActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtTienKhachDuaActionPerformed
    boolean checkSoLuongThayDoi() {
        String soLuongSanPhamString;
        do {
            soLuongSanPhamString = JOptionPane.showInputDialog(this, "Mời nhập số lượng cần thay đổi!!");
            if (soLuongSanPhamString == null) {
                return false;
            }
            if (soLuongSanPhamString.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không được để trống số lượng thay đổi!!");
                return false;
            } else {
                try {
                    soLuongSanPhamThayDoi = Integer.parseInt(soLuongSanPhamString);
                    if (soLuongSanPhamThayDoi <= 0) {
                        JOptionPane.showMessageDialog(this, "Số lượng thay đổi phải lớn hơn 0!!");
                        return false;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Số lượng thay dổi phải là số!!");
                    return false;
                }
            }
            Integer idSPCT = Integer.valueOf(tblInvoiceDetail.getValueAt(tblInvoiceDetail.getSelectedRow(), 1).toString());
            Integer idHD = getIDHD();
            if (soLuongSanPhamThayDoi > banHangRepository.getQuantityProductDetail(idSPCT) + banHangRepository.getQuantityInvoiceDetailByIdHDAndIdSPCT(idHD, idSPCT)) {
                JOptionPane.showMessageDialog(this, "Số lượng tồn không đủ!!");
            } else {
                break;
            }
        } while (true);

        return true;
    }

    //Hàm mở cam để quét qr
    void openQR() {
//        Dashboard tc = new Dashboard();
//        new ReadQRCodeBH(tc, true).setVisible(true);
         ReadQRCodeBH dialogSPCT = new ReadQRCodeBH((Frame) SwingUtilities.getWindowAncestor(this), true);
            dialogSPCT.setVisible(true);
           
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMenuItemUpdateQuantity;
    private javax.swing.JButton btnHuyHoaDon;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnScanQR;
    private javax.swing.JButton btnTaoHoaDon;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThemNhanhKhachHang;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JComboBox<String> cboHinhThucThanhToan;
    private javax.swing.JComboBox<String> cboVoucher;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItemDeleteProduct;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblBaoLoiKH;
    private javax.swing.JLabel lblMaHD4;
    private javax.swing.JLabel lblPayment;
    private javax.swing.JLabel lblPriceAfterReduction;
    private javax.swing.JLabel lblTienThua;
    private javax.swing.JLabel lblTienThuaThieu;
    private javax.swing.JLabel lblTienThuaThieu4;
    private javax.swing.JLabel lblTongTien4;
    private javax.swing.JSpinner spinValueMax;
    private javax.swing.JSpinner spinValueMin;
    private javax.swing.JTable tblInvoiceDetail;
    private javax.swing.JTable tblInvoicePending;
    private javax.swing.JTable tblProductDetail;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenKH;
    private javax.swing.JTextField txtTienKhachDua;
    private javax.swing.JTextField txtTim;
    // End of variables declaration//GEN-END:variables

    //Hàm tự động tạo mã hóa đơn
    String genCodeInvoice() {
        String stringCode = "HD00";
        Integer numberCode = banHangRepository.getSizeInvoice() + 1;
        if (numberCode < 10) {
            stringCode = stringCode + numberCode;
        } else {
            stringCode = "HD0" + numberCode;
        }
        return stringCode;
    }

    //Hàm tạo hóa đơn chờ mới
    private void createInvoicePending() {
        try {
            //Tạo 1 đối tượng hóa đơn chờ mới 
            //Set các giá trị mặc định cho hóa đơn chờ
            //Hóa đơn chờ là các hóa đơn có trạng thái là 2
            HoaDon invoice = new HoaDon();
            invoice.setIdKhachHang(1);
            invoice.setTenKhachHang("Khách Hàng Lẻ");
            invoice.setIdNhanVien(XLogin.user.getId());
            invoice.setIdThanhToan(1);
            invoice.setNgayDatHang(new Date());
            invoice.setMa(genCodeInvoice());
            invoice.setSDT("0123456789");
            invoice.setTongTien(0);
            invoice.setTongTienKhiGiam(1);
            invoice.setTrangThai(2);
          
            //Nếu tạo thành công thì load lại dữ liệu trên bảng và đưa ra thông báo tạo hóa đơn chờ thành công
            if (banHangRepository.createInvoicePending(invoice) != 0) {
                loadDataTableInvoicePending(banHangRepository.getAllInvoicePending());
                JOptionPane.showMessageDialog(this, "Tạo hóa đơn chờ thành công!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Có lỗi trong quá trình tạo hóa đơn!!");
            e.printStackTrace();
        }
    }

    //Hàm tải dữ liệu lên bảng sản phẩm
    private void loadDataTableSP(List<SanPhamChiTietResponse> list) {
        DefaultTableModel model = (DefaultTableModel) tblProductDetail.getModel();
        model.setRowCount(0);
        int i = 1;
        for (SanPhamChiTietResponse spctrp : list) {
            model.addRow(new Object[]{
                i++,
                spctrp.getMaSP(),
                spctrp.getId(),
                spctrp.getTenSP(),
                spctrp.getMauSac(),
                spctrp.getDoCungDua(),
                spctrp.getDoBay(),
                spctrp.getDiemCanBang(),
                spctrp.getTrongLuong(),
                spctrp.getDoCang(),
                spctrp.getSoLuong(),
                formatCash(spctrp.getDonGia())
            });
        }
    }

    //Hàm tải dữ liệu lên bảng hóa đơn chờ
    private void loadDataTableInvoicePending(List<HoaDon_Response> list) {
        DefaultTableModel model = (DefaultTableModel) tblInvoicePending.getModel();
        model.setRowCount(0);
        for (HoaDon_Response invoice : list) {
            model.addRow(new Object[]{
                invoice.getId(),
                invoice.getMa(),
                invoice.getNgayDatHang(),
                invoice.getMaNhanVien(),
                invoice.getTenKhachHang(),
                invoice.getTrangThai() == 2 ? "Chưa thanh toán" : ""
            });
        }
    }

    //Hàm tải dữ liệu lên bảng hóa đơn chi tiết theo id hóa đơn
    public void loadDataTableInvoiceDetailByCodeInvoice(ArrayList<HoaDonCT_Response> list) {
        DefaultTableModel mol = (DefaultTableModel) tblInvoiceDetail.getModel();
        NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
        mol.setRowCount(0);
        AtomicInteger index = new AtomicInteger(1);
        list.forEach(s -> {
            String FormatDonGia = currencyFormatter.format(s.getDonGia());
            String FormatThanhTien = currencyFormatter.format(s.getThanhTien());
            mol.addRow(new Object[]{
                index.getAndIncrement(),
                s.getCtspID(),
                s.getMaSP(),
                s.getTenSP(),
                s.getTenMau(),
                s.getDoCang(),
                s.getCDVot(),
                s.getSoLuong(),
                FormatDonGia,
                FormatThanhTien
            });
        });
    }

    //Hàm này trả về 1 đối tượng HDCT phục vụ việc thêm sản phẩm vào giỏ hàng
    HoaDonChiTiet readInvoiceDetail() {
        Integer idHD = getIDHD();
        Integer idSPCT = Integer.valueOf(tblProductDetail.getValueAt(tblProductDetail.getSelectedRow(), 2).toString());
        Double priceById = banHangRepository.getPriceProductDetail(idSPCT);
        if (checkMergeProduct(idHD, idSPCT)) {
            Integer quantityCurrent = this.getQuantityInvoiceDetail(idHD, idSPCT);
            Integer newQuantity = this.soLuongSanPham + quantityCurrent;
            Double price = this.totalPrice(newQuantity, priceById);
            this.mergeInvoiceDetail(idHD, idSPCT, newQuantity, price);
            updateQuantityProductDetailInStock(idSPCT);
            return null;
        }
        updateQuantityProductDetailInStock(idSPCT);
        return HoaDonChiTiet.builder()
                .idHD(idHD)
                .idSPCT(idSPCT)
                .soLuong(this.soLuongSanPham)
                .thanhTien(totalPrice(this.soLuongSanPham, priceById))
                .trangThai(2)
                .build();
    }

    //Hàm này trả về 1 đối tượng HDCT phục vụ việc thêm sản phẩm vào giỏ hàng
    HoaDonChiTiet readInvoiceDetailQR() {
        Integer idSPCT = ReadQRCodeBH.sPCT_id;
        Integer idHD = getIDHD();
        Double priceById = banHangRepository.getPriceProductDetail(idSPCT);
        if (checkMergeProduct(idHD, idSPCT)) {
            Integer quantityCurrent = this.getQuantityInvoiceDetail(idHD, idSPCT);
            Integer newQuantity = this.soLuongSanPham + quantityCurrent;
            Double price = this.totalPrice(newQuantity, priceById);
            this.mergeInvoiceDetail(idHD, idSPCT, newQuantity, price);
            updateQuantityProductDetailInStock(idSPCT);
            return null;
        }
        updateQuantityProductDetailInStock(idSPCT);
        return HoaDonChiTiet.builder()
                .idHD(idHD)
                .idSPCT(idSPCT)
                .soLuong(this.soLuongSanPham)
                .thanhTien(totalPrice(this.soLuongSanPham, priceById))
                .trangThai(2)
                .build();
    }

    //Hàm tính thành tiền của hóa đơn chi tiết
    Double totalPrice(Integer soLuong, Double donGia) {
        return soLuong * donGia;
    }

    //Biến hứng số lượng sản phẩm cần thêm
    int soLuongSanPham = 0;

    // Hàm này có tác dụng kiểm tra biến số lượng nhập vào 
    // là số, lớn hơn 0, không để null, kiêm tra số lượng tồn có đủ không
    boolean checkBeforAddToCart() {
        String soLuongSanPhamString;

        do {
            soLuongSanPhamString = JOptionPane.showInputDialog(this, "Mời nhập số lượng!!");
            if (soLuongSanPhamString == null) {
                return false;
            }

            if (soLuongSanPhamString.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không được để trống số lượng!!");
                return false;
            } else {
                try {
                    soLuongSanPham = Integer.parseInt(soLuongSanPhamString);

                    if (soLuongSanPham <= 0) {
                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!!");
                        return false;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Số lượng phải là số!!");
                    return false;
                }
            }
            if (soLuongSanPham > Integer.parseInt(tblProductDetail.getValueAt(tblProductDetail.getSelectedRow(), 10).toString())) {
                JOptionPane.showMessageDialog(this, "Số lượng tồn không đủ!!");
            } else {
                break;
            }
        } while (true);
        return true;
    }

    //Hàm check trước khi thêm sản phẩm bằng qr
    boolean checkBeforAddToCartQR() {
        String soLuongSanPhamString;

        do {
            soLuongSanPhamString = JOptionPane.showInputDialog(this, "Mời nhập số lượng!!");
            if (soLuongSanPhamString == null) {
                return false;
            }

            if (soLuongSanPhamString.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không được để trống số lượng!!");
                return false;
            } else {
                try {
                    soLuongSanPham = Integer.parseInt(soLuongSanPhamString);

                    if (soLuongSanPham <= 0) {
                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!!");
                        return false;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Số lượng phải là số!!");
                    return false;
                }
            }
            Integer quantityInStock = banHangRepository.getQuantityProductDetail(ReadQRCodeBH.sPCT_id);
            if (soLuongSanPham > quantityInStock) {
                JOptionPane.showMessageDialog(this, "Số lượng tồn không đủ!!");
            } else {
                break;
            }
        } while (true);
        return true;
    }

    //Hàm thêm sản phẩm vào giỏ hàng (hdct)
    private void addProductDetailIntoCart() {

        //Thực hiện check trước khi thêm sản phẩm vào hdct
        if (checkBeforAddToCart()) {
            HoaDonChiTiet hdct = readInvoiceDetail();
            if (hdct != null) {
                if (banHangRepository.createInvoieDetail(hdct) != 0) {
                    Integer idHD = getIDHD();
                    Double totalPriceInvoice = banHangRepository.getTotalpriceInvoice(idHD);
                    banHangRepository.updateToTalPriceInvoice(totalPriceInvoice, idHD);
                    loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
                } else {
                    JOptionPane.showMessageDialog(this, "Lỗi khi thêm sản phẩm vào giỏ hàng");
                }
            }
            Integer idHD = getIDHD();
            loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
            //Update lại các thành phần thanh toán
            this.updateElementPayment(idHD);
        }
    }

    //Hàm thêm sản phẩm vào giỏ hàng (hdct)
    private void addProductDetailIntoCartQR() {
        if (checkBeforAddToCartQR()) {
            HoaDonChiTiet hdct = readInvoiceDetailQR();
            if (hdct != null) {
                if (banHangRepository.createInvoieDetail(hdct) != 0) {
                    Integer idHD = getIDHD();
                    Double totalPriceInvoice = banHangRepository.getTotalpriceInvoice(idHD);
                    banHangRepository.updateToTalPriceInvoice(totalPriceInvoice, idHD);
                    loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
                } else {
                    JOptionPane.showMessageDialog(this, "Lỗi khi thêm sản phẩm vào giỏ hàng");
                }
            }
            Integer idHD = getIDHD();
            loadDataTableInvoiceDetailByCodeInvoice(banHangRepository.getInvoiceDetailByCodeInvoice(idHD));
            //Update lại các thành phần thanh toán
            this.updateElementPayment(idHD);
        }
    }

    //Hàm update lại các thành phần thanh toán
    private void updateElementPayment(Integer idHD) {
        Double totalPrice = banHangRepository.getTotalpriceInvoice(idHD);
        lblPayment.setText(formatCash(totalPrice));
        lblTongTien4.setText(formatCash(totalPrice));
        lblPriceAfterReduction.setText("Chưa chọn mã giảm giá nào");
        cboVoucher.setSelectedIndex(0);
    }

    //Hàm xóa form thanh toán
    private void clearElementPayment() {
        lblTienThua.setText("VND");
//        lblMaHD4.setText("");
        lblPayment.setText("VND");
        lblTongTien4.setText("VND");
        lblPriceAfterReduction.setText("Chưa chọn mã giảm giá nào");
        cboVoucher.setSelectedIndex(0);
        cboHinhThucThanhToan.setSelectedIndex(0);
        lblTienThuaThieu.setText("Khách thiếu:");
        txtTienKhachDua.setText("");

    }

    //Hàm chỉnh lại số lượng sản phẩm trong kho;
    private void updateQuantityProductDetailInStock(Integer idSPCT) {
        Integer quantity = banHangRepository.getQuantityProductDetail(idSPCT) - this.soLuongSanPham;
        banHangRepository.updateQuantityProductDetailInStock(quantity, idSPCT);
        loadDataTableSP(banHangRepository.getAllProductDetail());
    }

    //Hàm check xem sản phẩm đã có trong hóa đơn chưa;
    private boolean checkMergeProduct(Integer idHD, Integer idSPCT) {
        return banHangRepository.checkProductInInvoice(idHD, idSPCT) != 0;
    }

    //Hàm merge hdct 
    private void mergeInvoiceDetail(Integer idHD, Integer idSPCT, Integer quantity, Double thanhTien) {
        banHangRepository.mergeInvoiceDetail(idHD, idSPCT, quantity, thanhTien);
        Double totalPrice = banHangRepository.getTotalpriceInvoice(idHD);
        banHangRepository.updateToTalPriceInvoice(totalPrice, idHD);
    }

    //Hàm lấy ra số lượng trong hdct
    private Integer getQuantityInvoiceDetail(Integer idHD, Integer idSPCT) {
        return banHangRepository.getQuantityInvoiceDetailByIdHDAndIdSPCT(idHD, idSPCT);
    }

    //Hàm lấy ra số lượng sản phầm trong kho
    private Integer getQuantityProducteDetailInStock(Integer idSPCT) {
        return banHangRepository.getQuantityProductDetail(idSPCT);
    }

    //Hàm xóa sản phẩm ra khỏi giỏ hàng.
    private void deleteInvoiceDetail(Integer idHD, Integer idSPCT) {
        banHangRepository.deleteInvoiceDetail(idHD, idSPCT);
    }

    //Update lại số lượng sản phẩm trong kho
    private void updateQuantityProductDetailInStock(Integer quantity, Integer idSPCT) {
        banHangRepository.updateQuantityProductDetailInStock(quantity, idSPCT);
    }

    //Hàm hủy hóa đơn chưa phát sinh hdct
    private void cancelInvoiceUngenratedInvoiceDetail(Integer idHD) {
        banHangRepository.cancelInvoie(idHD);
        loadDataTableInvoicePending(banHangRepository.getAllInvoicePending());
    }

    //Hàm hủy hóa đơn đã phát sinh hdct
    private void cancelInvoiceGenratedInvoiceDetail(Integer idHD, Integer idSPCT) {
        banHangRepository.cancelInvoie2(idHD, idSPCT);

    }

    //Load dữ liệu hình thức thanh toán lên combobox
    private void loadComboboxFormOfPayment() {
        DefaultComboBoxModel cmodel = (DefaultComboBoxModel) cboHinhThucThanhToan.getModel();
        for (HinhThucThanhToan htth : banHangRepository.getListFormOfPayment()) {
            cmodel.addElement(htth);
        }
    }

    //Load phiếu giảm giá lên combobox
    private void loadComboboxVoucher() {
        DefaultComboBoxModel cmodel = (DefaultComboBoxModel) cboVoucher.getModel();
        List<PhieuGiamGia> listPgg = banHangRepository.getListVoucher();
        if (listPgg.isEmpty()) {
            cmodel.removeAllElements();
            cmodel.addElement("Không có phiếu giảm giá nào");
            cboVoucher.setEnabled(false);
            return;
        }
        cmodel.removeAllElements();
        cmodel.addElement("--Phiếu giảm giá--");
        for (PhieuGiamGia pgg : listPgg) {
            cmodel.addElement(pgg);
        }
    }

    //Hàm này có tác dụng format lại tiền
    private String formatCash(Double price) {
        try {
            NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
            String formated = currencyFormatter.format(price);
            return formated;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi trong quá trình format");
            return "";
        }

    }

    //Hàm này có tác dụng format lại tiền
    private String formatCash(float price) {
        try {
            NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
            String formated = currencyFormatter.format(price);
            return formated;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi trong quá trình format");
            return "";
        }

    }

    //Hàm dùng để lấy idHD trên tblInvoicePending;
    private Integer getIDHD() {
        if (tblInvoicePending.getSelectedRow() >= 0) {
            Integer idHD = Integer.valueOf(tblInvoicePending.getValueAt(tblInvoicePending.getSelectedRow(), 0).toString());
            return idHD;
        } else {
            JOptionPane.showMessageDialog(this, "Chọn hóa đơn trước!");
            return null;
        }
    }
    //Tìm kiếm khách hàng

    private void tuDongTinhTienKhachDua() {
        txtTienKhachDua.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateTienThua();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateTienThua();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Not used for plain text components
            }

            //Hàm tính tiền thừa
            private void updateTienThua() {
                try {
                    //Kiểm tra xem đã có hóa đơn nào được chọn chưa

                    if (tblInvoicePending.getSelectedRow() >= 0) {
                        //Kiểm tra trường hợp update tièn thừa khi không dùng mã giảm giá
                        if (cboVoucher.getSelectedIndex() == 0) {
                            System.out.println("[TÍNH TIỀN KHÔNG CÓ MÃ GIẢM GIÁ]");
                            //Biến chứa tổng tiền hóa đơn theo idHd;
                            Double totalPrice = banHangRepository.getTotalpriceInvoice(getIDHD());
                            //Biến chứa tiền khách đưa được ép kiểu từ txtTienKhachDua.getText();
                            Double tienKhachDua = Double.valueOf(txtTienKhachDua.getText());
                            //Hàm chứa giá trị tiền thiếu khi người dùng đưa thiếu tiền;
                            double tienThieu = 0d;
                            //Hàm chứa giá trị tiền thừa khi người dùng đưa thừa tiền;
                            double tienThua = 0d;

                            //Kiểm tra xem tổng tiền của hóa đơn lớn hơn tiền khách đưa
                            if (totalPrice >= tienKhachDua) {
                                System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THIẾU]");
                                //Set biến tiền thiếu  = tổng giá trị hóa đơn theo idhd trừ đi tiền khách đưa;
                                tienThieu = totalPrice - tienKhachDua;
                                //Set lblTienThua = tienThieu
                                lblTienThua.setText(formatCash(tienThieu));

                                //Kiểm tra biến tiền thiếu = 0 thì set lblTienThuaThieu là Trả lại:
                                if (tienThieu == 0) {
                                    lblTienThuaThieu.setText("Trả lại:");
                                } //Kiểm tra biến tiền thiếu = 0 thì set lblTienThuaThieu là Khách thiếu:
                                else {
                                    lblTienThuaThieu.setText("Khách thiếu:");
                                }
                            } //Trường hợp tính tiền khách đưa thừa
                            else {
                                System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THỪA]");
                                //set biến tiền thừa = tiền khách đưa trừ đi tổng tiền hóa đơn
                                tienThua = tienKhachDua - totalPrice;
                                //Set text cho lblTienThua = tienThua
                                lblTienThua.setText(formatCash(tienThua));
                                if (tienThieu == 0) {
                                    lblTienThuaThieu.setText("Trả lại:");
                                } else {
                                    lblTienThuaThieu.setText("Khách thiếu:");
                                }
                            }
                            //Trường hợp tính tiền thiếu và thừa nếu người dùng có sử dụng mã giảm giá
                        } else {
                            //Tạo 1 đối tượng phiếu giảm giá theo voucher đang được chọn
                            PhieuGiamGia pgg = (PhieuGiamGia) cboVoucher.getSelectedItem();
                            //Tạo 1 biến chứa tổng tiền của hóa đơn theo id
                            Double totalPrice = banHangRepository.getTotalpriceInvoice(getIDHD());
                            //Biến chứa giá tiền sau khi dùng voucher tiền mặt
                            Double priceAfterVoucherCash = 0d;
                            //Biến chứa giá tiền sau khi dùng voucher %
                            Double priceAfterVoucherPercent = 0d;
                            //Biến chứa tiền khách đưa
                            Double tienKhachDua = Double.valueOf(txtTienKhachDua.getText());
                            //Biến chứa tiền thiếu
                            double tienThieu = 0d;
                            //Biến chứa tiền thừa
                            double tienThua = 0d;

                            //Kiểm tra đây là loại giảm giá tiền mặt hay %
                            if (pgg.getLoaiGiam()) {
                                //Trường hợp tính tiền thừa thiếu theo voucher tiền mặt;

                                //Set biến chứa tiền sau giảm bằng tiền mặt
                                priceAfterVoucherCash = getPriceAfterVoucherCash(pgg.getGiaTriGiamMax(), totalPrice);
                                System.out.println("[TÍNH TIỀN CÓ MÃ GIẢM GIÁ THEO TIỀN MẶT]");

                                //Nếu tiền sau giảm giá >= tiền khách đưa tính tiền khách thiếu
                                if (priceAfterVoucherCash >= tienKhachDua) {
                                    System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THIẾU]");
                                    //Set tiền thiếu = tiền sau giảm - tiền khách đưa
                                    tienThieu = priceAfterVoucherCash - tienKhachDua;
                                    lblTienThua.setText(formatCash(tienThieu));
                                    //Nếu tiền thiếu == 0 thì set trả lại
                                    if (tienThieu == 0) {
                                        lblTienThuaThieu.setText("Trả lại:");
                                    } else {
                                        lblTienThuaThieu.setText("Khách thiếu:");
                                    }
                                } else {
                                    System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THỪA]");
                                    tienThua = tienKhachDua - priceAfterVoucherCash;
                                    lblTienThua.setText(formatCash(tienThua));
                                    if (tienThieu == 0) {
                                        lblTienThuaThieu.setText("Trả lại:");
                                    } else {
                                        lblTienThuaThieu.setText("Khách thiếu:");
                                    }
                                }
                            } else {
                                System.out.println("[TÍNH TIỀN CÓ MÃ GIẢM GIÁ THEO %]");
                                int value = (int) pgg.getGiaTriGiamMax();

                                priceAfterVoucherPercent = getPriceAfterVoucherPercent(pgg.getHoaDonToiThieu(), totalPrice, value);

                                System.out.println("[TÍNH TIỀN CÓ MÃ GIẢM GIÁ THEO TIỀN MẶT]");
                                if (priceAfterVoucherPercent >= tienKhachDua) {
                                    System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THIẾU]");
                                    tienThieu = priceAfterVoucherPercent - tienKhachDua;
                                    lblTienThua.setText(formatCash(tienThieu));
                                    if (tienThieu == 0) {
                                        lblTienThuaThieu.setText("Trả lại:");
                                    } else {
                                        lblTienThuaThieu.setText("Khách thiếu:");
                                    }
                                } else {
                                    System.out.println("[TÍNH TIỀN KHÁCH ĐƯA THỪA]");
                                    tienThua = tienKhachDua - priceAfterVoucherPercent;
                                    lblTienThua.setText(formatCash(tienThua));
                                    lblTienThuaThieu.setText("Trả lại:");
                                }
                            }
                        }
                    } else {
                        System.out.println("[CHƯA CHỌN HÓA ĐƠN]");
                    }

                } catch (NumberFormatException ex) {
                    lblTienThua.setText("Nhập số hợp lệ!");
                }
            }
        });
    }

    //Hàm này để thực hiện tính toán tiền sau khi dùng mã giảm tiền mặt
    public Double getPriceAfterVoucherCash(Float valueReduction, Double totalPriceInvoice) {
        //Trường hợp giá trị hóa đơn lớn hơn giá trị giảm;
        //Trả về giá trị Tổng tiền của hóa đơn trừ đi giá trị giảm
        if (totalPriceInvoice > valueReduction) {
            return totalPriceInvoice - valueReduction;
        } //Trường hợp giá trị hóa đơn nhỏ hơn giá trị giảm
        //Thực hiện trả về 0 để tránh bị âm giá tiền;
        else if (totalPriceInvoice < valueReduction) {
            return 0d;
        }
        //Trả về 0 khi cả 2 giá trị = nhau
        return 0d;
    }

    //Hàm này để thực hiện tính toán tiền sau khi dùng mã giảm %
    public Double getPriceAfterVoucherPercent(Float valueReduction, Double totalPriceInvoice, Integer percentDecrease) {
        //Trường hợp giá trị hóa đơn lớn hơn giá trị giảm

        Double priceReduce = (totalPriceInvoice / 100) * percentDecrease;
        if (priceReduce > valueReduction) {
            return totalPriceInvoice - valueReduction;
        } else {
            return totalPriceInvoice - priceReduce;
        }

    }
}
